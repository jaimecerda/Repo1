//RULES:
//-The script treats the Archimate framework layers as a hierarchy, so the recursive loop will prevent a lower layer element to go search into an upper layer element.  This prevents the path search to deviate into elements that won't contribute searching the target node.  Motivation layer is treated same as the Strategy layer.  Grouping and Location are ignored and will be recursively searched.

//==========================GLOBAL VARIABLES=========================
var _sourceNode = "requirement";  //configurable parameter for starting element type
var _targetNode = "artifact";  //configurable parameter for target element type
var _propertyFilter="";  //optional configurable parameter for filtering _sourceNode's that match given value.  Property value in Archi element should be set to "yes" in order to get a match
var _matchingPaths = [];  //empty list to store the matching paths
var _deepLevelLimit = 15;  //number of levels to go deep in recursiveness, after which search will be truncated (to prevent unresponsiveness)
//variables to store standard archimate elements
var _motivationElements=["stakeholder","driver","assessment","goal","outcome","principle","requirement","constraint","meaning","value"];
var _strategyElements=["resource","capability","course-of-action","value-stream"];
var _businessElements=["business-actor","business-role","business-collaboration","business-interface","business-process","business-function","business-interaction","business-event","business-service","business-object","contract","representation","product"];
var _applicationElements=["application-component","application-collaboration","application-interface","application-function","application-process","application-interaction","application-event","application-service","data-object"];
var _technologyElements=["node","device","system-software","technology-collaboration","technology-interface","path","communication-network","technology-function","technology-process","technology-interaction","technology-event","technology-service","artifact"];
var _physicalElements=["equipment","facility","distribution-network","material"];
var _impAndMigElements=["work-package","deliverable","implementation-even","plateau","gap"];

var _motivationAssesmentFigure="<svg><defs/><g transform='translate(3,4)'><ellipse cx='9' cy='5' rx='6' ry='6' fill='#ccccff' stroke='rgb(0, 0, 0)' pointer-events='all' /><path d='M 0 15 L 4.8 10.2' fill='none' stroke='rgb(0, 0, 0)' stroke-miterlimit='10' pointer-events='all' /></g></svg>";

var _businessActorFigure="<svg><g><ellipse cx='9' cy='5.25' rx='2.6999999999999997' ry='2.25' fill='#ffff99' stroke='rgb(0, 0, 0)' pointer-events='all' /><path d='M 9 7.5 L 9 14.25 M 4.5 9 L 13.5 9 M 4.5 17 L 9 13.25 L 13.5 17' fill='none' stroke='rgb(0, 0, 0)' stroke-miterlimit='10' pointer-events='all' /></g></svg>";
var _businessCollabortionFigure="<svg><g><ellipse cx='9' cy='5.5' rx='4.5' ry='4.5' fill='#ffff99' stroke='rgb(0, 0, 0)' pointer-events='all' /><ellipse cx='15' cy='5.5' rx='4.5' ry='4.5' fill='#ffff99' stroke='rgb(0, 0, 0)' pointer-events='all' /></g></svg>";
var _businessEventFigure="<svg><g transform='translate(4,0)'><path d='M 9 3 C 11.49 3 13.5 5.01 13.5 7.5 C 13.5 9.99 11.49 12 9 12 L -1.5 12 L 3 7.5 L -1.5 3 Z' fill='#ffff99' stroke='rgb(0, 0, 0)' stroke-miterlimit='10' pointer-events='all' /></g></svg>";
var _businessInteractionFigure="<svg><g transform='translate(2,1)'><path d='M 9.25 0 C 12.98 0 16 3.36 16 7.5 C 16 11.64 12.98 15 9.25 15 Z M 7.75 0 C 4.02 0 1 3.36 1 7.5 C 1 11.64 4.02 15 7.75 15 Z' fill='#ffff99' stroke='rgb(0, 0, 0)' stroke-miterlimit='10' pointer-events='all' /></g></svg>";
var _businessInterfaceFigure="<svg><g><ellipse cx='11.25' cy='7.5' rx='3.75' ry='3.5' fill='#ffff99' stroke='rgb(0, 0, 0)' pointer-events='all' /><path d='M 0 7.5 L 7.5 7.5' fill='none' stroke='rgb(0, 0, 0)' stroke-miterlimit='10' pointer-events='all' /></g></svg>";
var _businessObjectFigure="<svg ><rect x='0' y='0' width='22' height='18' fill='#ffff99' stroke='rgb(0, 0, 0)' pointer-events='all' /><path d='M 0 5 L 22 5.1' fill='none' stroke='rgb(0, 0, 0)' stroke-miterlimit='10' pointer-events='all' /></svg>";

var _appCollaborationFigure="<svg width='35' height='22'><g><ellipse cx='8.5' cy='12.5' rx='4.5' ry='4.5' fill='#99ffff' stroke='rgb(0, 0, 0)' pointer-events='all'/><ellipse cx='15.5' cy='12.5' rx='4.5' ry='4.5' fill='#99ffff' stroke='rgb(0, 0, 0)' pointer-events='all'/></g></svg>";
var _appComponentFigure="<svg width='35' height='22'><g><rect x='4.25' y='5' width='9.75' height='15' fill='#99ffff' stroke='rgb(0, 0, 0)' pointer-events='all'/><rect x='1' y='8.75' width='6.5' height='2.25' fill='#99ffff' stroke='rgb(0, 0, 0)' pointer-events='all'/><rect x='1' y='14' width='6.5' height='2.25' fill='#99ffff' stroke='rgb(0, 0, 0)' pointer-events='all'/></g></svg>";
var _appEventFigure="<svg width='35' height='22'><g><path d='M 20.5 8 C 22.99 8 25 10.01 25 12.5 C 25 14.99 22.99 17 20.5 17 L 9 17 L 14.5 12.5 L 9 8 Z' fill='#99ffff' stroke='rgb(0, 0, 0)' stroke-miterlimit='10' pointer-events='all'/></g></svg>";
var _appFunctionFigure="<svg><g transform='translate(10, 5)><path d='M 0 0 L 7.5 3 L 7.5 15 L 0 12 L -7.5 15 L -7.5 3 Z' fill='#99ffff' stroke='rgb(0, 0, 0)' stroke-miterlimit='10' pointer-events='all'/></g></svg>";
var _appInteractionFigure="<svg><g transform='translate(15, 5)'><path d='M -2.75 0 C 1.98 0 5 3.36 5 7.5 C 5 11.64 1.98 15  -2.75 15 Z M -4.25 0 C -8.98 0 -12 3.36 -12 7.5 C -12 11.64 -8.98 15 -4.25 15 Z' fill='#99ffff' stroke='rgb(0, 0, 0)' stroke-miterlimit='10' pointer-events='all'/></g></svg>";
var _appInterfaceFigure="<svg><g><ellipse cx='11' cy='5' rx='3.75' ry='3.5' fill='#99ffff' stroke='rgb(0, 0, 0)' pointer-events='all' /><path d='M 0 5 L 7.5 5' fill='none' stroke='rgb(0, 0, 0)' stroke-miterlimit='10' pointer-events='all' /></g></svg>";
var _appProcessFigure="<svg><g><path d='M 9 5.7 L 18 5.7 L 18 3 L 24 7.5 L 18 12 L 18 9.3 L 9 9.3 Z' fill='#99ffff' stroke='rgb(0, 0, 0)' stroke-miterlimit='10' pointer-events='all'/></g></svg>";
var _appServiceFigure="<svg><g transform='translate(4,0)'><path d='M 9.5 3 C 11.99 3 14 5.01 14 7.5 C 14 9.99 11.99 12 9.5 12 L 3.5 12 C 1.01 12 -1.09 9.99 -1.09 7.5 C -1.09 5.01 1.01 3 3.5 3 Z' fill='#99ffff' stroke='rgb(0, 0, 0)' stroke-miterlimit='10' pointer-events='all' /></g></svg>";
var _appDataObjectFigure="<svg ><rect x='0' y='0' width='22' height=='18' fill='#99ffff' stroke='rgb(0, 0, 0)' pointer-events='all' /><path d='M 0 5 L 22 5.1' fill='none' stroke='rgb(0, 0, 0)' stroke-miterlimit='10' pointer-events='all' /></svg>";

var _techArtifactFigure="<svg><g><path d='M 9 0 L 16.7 0 L 20 3.3 L 20 15 L 9 15 Z M 16.7 0 L 16.7 3.3 L 20 3.3' stroke='rgb(0, 0, 0)' stroke-miterlimit='10' pointer-events='all' fill='#afffaf'/></g></svg>";





//==========================FUNCTION LIBRARY=========================
//Function to encond a raw string to a HTML compatible string 
function encodeHTML(rawString){
    return rawString.replace(/[\u00A0-\u9999<>\&]/gim,function(i){
        return '&#' + i.charCodeAt(0) + ';';
    });
}


//Fuction to search a given element's layer within the Archimate framework
function getElementLayer(element){
    if(_motivationElements.find(e=>e==element.type)){return 1;}
    if(_strategyElements.find(e=>e==element.type)){return 1;}
    if(_businessElements.find(e=>e==element.type)){return 3;}
    if(_applicationElements.find(e=>e==element.type)){return 4;}
    if(_technologyElements.find(e=>e==element.type)){return 5;}
    if(_physicalElements.find(e=>e==element.type)){return 6;}
    if(_impAndMigElements.find(e=>e==element.type)){return 7;}
}


//Function to get the Archimate's standard color on a given element (colors are aproximate to standard)
function getElementColor(element){
    if(_motivationElements.find(e=>e==element.type)){return "#ccccff";}
    if(_strategyElements.find(e=>e==element.type)){return "#f5deaa";}
    if(_businessElements.find(e=>e==element.type)){return "#ffffb5";}
    if(_applicationElements.find(e=>e==element.type)){return "#b5ffff";}
    if(_technologyElements.find(e=>e==element.type)){return "#c9e7b7";}
    if(_physicalElements.find(e=>e==element.type)){return "#c9e7b7";}
    if(_impAndMigElements.find(e=>e==element.type)){return "#ffe0e0";}
}


function getElementSymbol(element){
    var resSymbol="";

    switch (element.type) {
        case "application-component": resSymbol=_appComponentFigure;
        break;
        
        default: resSymbol="";
     }

     return resSymbol;
}


//Function to compare the current element's layer vs target element's layer and see if the target is an upper layer within the Archumate framework
function isTargetUpperLayer(currentElement,targetElement){
    var currentElementLayer=getElementLayer(currentElement);
    var targetElementLayer=getElementLayer(targetElement);

    return targetElementLayer<currentElementLayer;  //TODO: Change the order so operator does what function name indicates
}


//Function to know if there's an element propertyto filter by
function passesPropertyValidation(element){
    if(_propertyFilter!=""){
        return $(element).prop(_propertyFilter)==null ? false : $(element).prop(_propertyFilter).toLowerCase()=="yes";
    }
    else{
        return true;
    }
}


//Recursive function to search for the Target Node starting from a given element
function searchForTarget(element, path, _matchingPaths){
    
    //Add current element to the path
    path.push({name:element.name,type:element.type,ID:element.id});

    //If the element matches the Target node, add the current path to the _matchingPaths list
    if(element.type==_targetNode){
        _matchingPaths.push(path.slice());
    }

    //If recursive iteration is too deep then truncate it
    if(path.length>=_deepLevelLimit){
        console.log("... recursive iteration too deep, truncating ...");
        return;
    }

    //Otherwise, recursively search for the Target node starting from each of the element's relationship's targets (if target passes validations)
    $(element).outRels().forEach(function(relationship){
        if((!path.find(e=>e.name==relationship.getTarget().name))                                           //Make sure we don't make circular reference back to an existing element in the path
            && (relationship.getTarget().type!=_sourceNode)                                                 //Prevent from going back in hierarchy by getting into the Source node.  TODO:See,s redundant
            && (relationship.type!="specialization-relationship")                                           //Prevent path deviation by going to a "parent", in this case outgoing inheritance
            && (relationship.type!="influence-relationship")                                                //Ignoring Influence relationships
            && (!isTargetUpperLayer(element,relationship.getTarget()))){                                    //Prevent from going into an upper layer in Archimate's framwework
                console.log("Looking from " + element.name + " into " + relationship.getTarget().name);
                searchForTarget(relationship.getTarget(),path,_matchingPaths);
        }
    });

    //Some relationships are considered as inRels, so need to check those too.  Either because of user setting up relationships in reverse order, or because some are reverse by nature
    $(element).inRels().forEach(function(relationship){
        if((!path.find(e=>e.name==relationship.getSource().name))                                           //Make sure we don't make circular reference back to an existing element in the path
            && (relationship.getSource().type!=_sourceNode)                                                 //Prevent from going back in hierarchy by getting into the Source node.  TODO:See,s redundant
            && (relationship.type!="composition-relationship")                                              //Prevent path deviation by going to a "parent", in this case incoming composition
            && (relationship.type!="assignment-relationship")                                               //Prevent path deviation by going to a "parent", in this case incoming assignment
            && (relationship.type!="aggregation-relationship")                                              //Prevent path deviation by going to a "parent", in this case incoming aggregate
            && (relationship.type!="influence-relationship")                                                //Ignoring Influence relationships
            && (!isTargetUpperLayer(element,relationship.getSource()))){                                    //Prevent from going into an upper layer in Archimate's framwework
                console.log("Looking from " + element.name + " into " + relationship.getSource().name);
                searchForTarget(relationship.getSource(),path,_matchingPaths);
        }
    });

    //Remove the current element from the path before returning
    path.pop();
}


//Function to write all the matching paths to a file
function write_matchingPathsToFile(_matchingPaths){
    var filePath = window.promptSaveFile();
    var writer = new java.io.FileWriter(file);
    writer.write("Path\n");
    console.log("\rHere are the resulting paths ...\r");
    _matchingPaths.forEach(function(path){
        var row="";
        path.forEach(function(elementName){
            row+=elementName + ",";
        });
    console.log("row");
    writer.write(row.substring(0,row.length-1) + "\n");
    });
    writer.close();
}


//Function to write all the matching paths to a HTML file
function write_matchingPathsToHTML(_matchingPaths){
    var resText="";
    var bgColor="";
    var filePath = window.promptSaveFile({
        title: "Save Report File",
        filterExtensions: ["*.html"],
        fileName: "EndToEndTraceabilityReport.md"
    });

    if(filePath != null) {
        console.log("\rHere are the resulting paths ...\r");
        resText+="<!DOCTYPE html>\r<html>\r<head>\r<style>\r";
        resText+="th, td {\r border: 1px solid black;\r border-radius:3px;\r}\r";
        resText+=".cell-content {\r display:flex;\rjustify-content:space-between;\r}\r\r.cell-header {\rfont-size:xx-small;\rfont-style:italic;\r}";
        resText+="</style>\r</head>\r<body>\r";
        resText+="<h2>End to End Traceability Report</h2>\r";
        resText+="<h4>FROM:<span style='font-style:italic'>"+_sourceNode+"</span> TO:<span style='font-style:italic'>"+_targetNode+"</span></h4>\r";
        resText+="<table style='width:100%'>\r";
        _matchingPaths.forEach(function(path){
            resText+="<tr>\r";
            path.forEach(function(pathElement){
                resText+="<td title='"+pathElement.ID+"' bgcolor='"+getElementColor(pathElement)+"'><div class='cell-content'><div class='cell-header'>"+pathElement.type+"</div><div class='cell-image'>"+getElementSymbol(pathElement)+"</div></div>"+encodeHTML(pathElement.name)+ "</td>\r";
            });
            resText+="</tr>\r";
        });
        resText+="</table>\r</body>\r</html>";

        try {
            $.fs.writeFile(filePath, resText);
        }
        catch(err) {
            console.error(err);
        }
    
        var browser = Browser.open("file:///" + filePath, "End To End Traceability Report");
        console.log(resText);
    }




}


//==========================MAIN CODE=========================
console.log("Starting script...");

console.log("... getting initial batch of source elements of type:"+_sourceNode+" \r");
$(_sourceNode).each(function(element){
    //Filter by element property if set
    if(passesPropertyValidation(element)){
        searchForTarget(element,[],_matchingPaths);
    }
});

console.log("... done going through source elements!\r");

//Write to file
write_matchingPathsToHTML(_matchingPaths);
console.log("\r... done!");
